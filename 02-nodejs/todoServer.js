/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());

module.exports = app;

const uuid = require("uuid").v4;
let todosList = [];

const getTodos = (req, res, next) => {
  res.status(200).send(todosList);
};

const getTodo = (req, res, next) => {
  const todoId = req.params.id;
  const todo = todosList.filter((todo) => todo.id == todoId);
  if (todo.length > 0) {
    res.status(200).send(todo[0]);
  }
  res.status(404).send();
};

const postTodo = (req, res, next) => {
  const newTodoId = uuid();
  const newTodo = req.body;
  todosList = [
    ...todosList,
    {
      id: newTodoId,
      title: newTodo.title,
      completed: newTodo.completed,
      description: newTodo.description,
    },
  ];
  res.status(201).send({ id: newTodoId });
};

const putTodo = (req, res, next) => {
  const todoId = req.params.id;
  if (todosList.filter((todo) => todo.id == todoId).length === 0) {
    res.status(404).send();
  }
  const updatedTodo = req.body;
  todosList = todosList.map((todo) =>
    todo.id == todoId
      ? {
          ...todo,
          title: updatedTodo.title,
          completed: updatedTodo.completed,
        }
      : todo
  );
  res.status(200).send();
};

const deleteTodo = (req, res, next) => {
  const todoId = req.params.id;
  const remainingTodos = todosList.filter(
    (todo) => todo.id != todoId
  );
  if (todosList.length !== remainingTodos.length) {
    todosList = remainingTodos;
    res.status(200).send();
  }
  res.status(404).send();
};

app.get("/todos", getTodos);

app.get("/todos/:id", getTodo);

app.post("/todos", postTodo);

app.put("/todos/:id", putTodo);

app.delete("/todos/:id", deleteTodo);

// app.listen(PORT, () => console.log("STARTED SERVER AT PORT"));
